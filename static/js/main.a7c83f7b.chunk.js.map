{"version":3,"sources":["utils.js","components/Square/Square.js","components/ToolBox/ToolBox.js","components/Clue/Clue.js","components/Board/CountBombs.js","components/Board/Board.js","components/Game/Game.js","index.js"],"names":["SQUARE_STATUS","SQUARE_TYPES","TOOLS","GAME_STATUS","Square","props","type","row","col","this","game_state","status","window","twemoji","parse","document","querySelector","className","onClick","square_content","clues","React","Component","Tool","active","icon","value","ToolBox","tools","map","tool","key","Clue","arrow","ARROWS","dir","set_percentage_value","handleMouseOver","bind","handleMouseLeave","percent","as_percentage","total","n","t","Number","toFixed","e","target","textContent","prevProps","onMouseEnter","onMouseLeave","forward_diagonal","back_diagonal","horizontal","vertical","get_row_size","r","get_col_relative_to_grid","c","get_col_size","grid","grid_coords","sz","length","grid_col","col_len","r_start","Math","abs","c_start","i","get_row_type","GameEnd","location","reload","style","textAlign","result","refreshPage","Board","size","len","density","bomb_density","total_fields","total_digs","digs","state","squares","Array","fill","_","CountBombs","random","current_game_status","remaining","flat","filter","grid_col_to_square_col","grid_to_square","num_of_rows","row_len","generate_grid_cols_from_squares","old_square","new_square","remaining_state","setState","addEventListener","closest","preventDefault","sq","dataset","handleSquareClick","parseInt","clue","which","parentElement","handleClueClick","classList","is_rightclick","was_dig_tool","updateSquare","squares_to_update","clone","determine_new_square_status","new_game_status","updateGameStatus","extra_arg","row_type","itr","getCountBombGenerator","coords_to_clear","coords","square","push","list","bombs_cnt","unknown_cnt","join","max_len","half_n_floored","floor","half_max_len_floored","addClue","max","toggleShovel","square_data","j","display_clues","Game","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a7c83f7b.chunk.js","sourcesContent":["export const SQUARE_STATUS = {\n\tUNKNOWN: 0,\n\tFLAGGED: 1,\n\tREVEALED: 2,\n\tREVEALED_EMPTY: 2,\n\tREVEALED_BOMB: 3,\n\tREVEALED_BOMB_SAFE: 3,\n\tREVEALED_BOMB_DANGER: 4\n};\n\nexport const SQUARE_TYPES = {\n\tEMPTY: 0,\n\tBOMB: 1\n};\n\nexport const TOOLS = {\n\tCLEAR: 0,\n\tFLAG: 1,\n\tDIG: 2\n};\n\nexport const LIMITED_TOOLS = [\n\tTOOLS.FLAG,\n\tTOOLS.DIG\n];\n\nexport const GAME_STATUS = {\n\tONGOING: 0,\n\tWIN: 1,\n\tLOSS: 2\n};\n","import React from 'react';\nimport './Square.scss';\nimport {SQUARE_STATUS, SQUARE_TYPES, GAME_STATUS} from \"../../utils\";\n\n\nclass Square extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.type = props.type;\n\t\tthis.row = props.row;\n\t\tthis.col = props.col;\n\t\t// this.revealSquare = this.revealSquare.bind(this);\n\t}\n\tsquare_content() {\n\t\tif (this.props.game_state === GAME_STATUS.LOSS && this.props.status === SQUARE_STATUS.FLAGGED && this.type !== SQUARE_TYPES.BOMB) return \"❌\";\n\t\tif (this.props.status === SQUARE_STATUS.FLAGGED) return \"🚩\";\n\t\tif (this.props.status >= SQUARE_STATUS.REVEALED_BOMB) return \"💣\";\n\t\tif (this.props.game_state === GAME_STATUS.LOSS && this.type === SQUARE_TYPES.BOMB) return \"🟠\";\n\t\tif (this.props.game_state === GAME_STATUS.WIN && this.type === SQUARE_TYPES.BOMB) return \"🟡\";\n\t\treturn \"\";\n\t}\n\tcomponentDidUpdate() {\n\t\twindow.twemoji.parse(document.querySelector(`.square[data-row=\"${this.row}\"][data-col=\"${this.col}\"]`));\n\t}\n\trender() {\n\t  return (\n\t\t<div className=\"wrapper\">\n\t\t\t<div className={\"square\" + (this.props.status >= SQUARE_STATUS.REVEALED ? \" revealed\" : \"\")} \n\t\t\t\t// key={this.props.row + \",\" + this.props.col} \n\t\t\t\tdata-row={this.row} data-col={this.col} \n\t\t\t\tonClick={this.props.onClick} \n\t\t\t\t>\n\t\t\t\t<span>{this.square_content()}</span>\n\t\t\t</div>\n\t\t\t{this.props.clues}\n\t\t</div>\n\t  );\n\t}\n}\n\nexport default Square;\n","import React from 'react';\nimport './ToolBox.scss';\n\nclass Tool extends React.Component {\n\t// constructor(props) {\n\t// \tsuper(props);\n\n\t\t// switch (this.props.type) {\n\t\t// \tcase \"shovel\":\n\t\t// \t\tthis.toolicon = \"⛏️\";\n\t\t// \t\tbreak;\n\t\t// \tcase \"flag\":\n\t\t// \tdefault:\n\t\t// \t\tthis.toolicon = \"🚩\";\n\t\t// \t\tbreak;\n\t\t// }\n\t\t// this.status = props.status\n\t\t// this.type = props.type;\n\t\t// this.revealSquare = this.revealSquare.bind(this);\n\t// }\n\trender() {\n\t  return (\n\t\t<div className={\"tool\" + (this.props.active ? \" selected\" : \"\")} onClick={this.props.onClick}>\n\t\t\t<span className=\"icon\">{this.props.icon}</span>\n\t\t\t<span className=\"count\">{this.props.value}</span>\n\t\t</div>\n\t  );\n\t}\n}\n\nclass ToolBox extends React.Component {\n\t// constructor(props) {\n\t\t// super(props);\n\t\t// this.status = props.status\n\t\t// this.type = props.type;\n\t\t// this.revealSquare = this.revealSquare.bind(this);\n\t// }\n\tcomponentDidMount() {\n\t\twindow.twemoji.parse(document.querySelector(\".toolbox\"));\n\t}\n\trender() {\n\t  return (\n\t\t  <div className=\"toolbox\">\n\t\t\t{this.props.tools.map(tool => (\n\t\t\t\t<Tool {...tool} key={tool.type} />\n\t\t\t))}\n\t\t</div>\n\t  );\n\t}\n}\n\nexport default ToolBox;\nexport {Tool};\n","import React from 'react';\nimport './Clue.scss';\n\nclass Clue extends React.Component {\n\tstatic ARROWS = {\n\t\t'N': '↑',\n\t\t'NE': '↗',\n\t\t'E': '→',\n\t\t'SE': '↘',\n\t\t'S': '↓',\n\t\t'SW': '↙',\n\t\t'W': '←',\n\t\t'NW': '↖'\n\t};\n\tconstructor(props) {\n\t\tsuper(props);\n\t// \tthis.status = props.status\n\t// \tthis.type = props.type;\n\t\tthis.arrow = Clue.ARROWS[props.dir];\n\t\tthis.value = this.props.value;\n\t\tthis.set_percentage_value();\n\t\tthis.handleMouseOver = this.handleMouseOver.bind(this);\n\t\tthis.handleMouseLeave = this.handleMouseLeave.bind(this);\n\t}\n\tset_percentage_value() {\n\t\tthis.percent = this.as_percentage(this.props.value, this.props.total);\n\t}\n\tas_percentage(n, t) {\n\t\treturn (t === 0 ? 0 : Number((n / t * 100).toFixed(1))) + \"%\";\n\t}\n\thandleMouseOver(e) {\n\t\te.target.textContent = this.percent;\n\t}\n\thandleMouseLeave(e) {\n\t\te.target.textContent = this.value;\n\t}\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.total !== this.props.total) {\n\t\t\tthis.set_percentage_value();\n\t\t}\n\t}\n\trender() {\n\t  return (\n\t\t<div className={\"clue \" + this.props.dir}>\n\t\t\t<span className=\"clue__value\" onMouseEnter={this.handleMouseOver} onMouseLeave={this.handleMouseLeave}>{this.value}</span>\n\t\t\t<span className=\"clue__direction\">{this.arrow}</span>\n\t\t</div>\n\t  );\n\t}\n}\n\nexport default Clue;","export function get_row_size(n, r) {\n\treturn r >= n ? 4*n - 2*r - 3 : 2*r + 1;\n}\n\nexport function get_col_relative_to_grid(n, r,c) {\n\treturn (r >= n ? r - n + 1 : n - 1 -r) + c;\n}\n\nexport function get_col_size(n, r, c) {\n\treturn get_row_size(n, get_col_relative_to_grid(n, r,c));\n}\n\n/**\n * Gets the number of bombs at a given forward diagonal (/ ; NE / SW)\n * @param {Object[[]]} grid\n * @param {number} row - The row to start at\n * @param {number} col - The column of the row to start at\n * @param {Object[][]} grid_coords - A map of the squares' coordinates relative to the grid to those relative to the grid object\n * @returns {Object} the number of bombs and unknown fields in the diagonal\n */\nexport function* forward_diagonal(grid, row, col, grid_coords) {\n\tlet sz = (grid.length-1) / 2 + 1;\n\tlet grid_col = get_col_relative_to_grid(sz, row, col);\n\t\n\tif (col === 0) {\n\t\tfor (let r=row,c=grid_col; r>row-sz; r--, c++) {\n\t\t\tyield [r,grid_coords[r][c]];\n\t\t}\n\t} else {\n\t\tfor (let r=row,c=grid_col; r<row+sz; r++, c--) {\n\t\t\tyield [r,grid_coords[r][c]];\n\t\t}\n\t}\n}\n\n/**\n * Gets the number of bombs at a given backwards diagonal (\\ ; NW \\ SE)\n * @param {Object[[]]} grid\n * @param {number} row - The row to start at\n * @param {number} col - The column of the row to start at\n * @param {Object[][]} grid_coords - A map of the squares' coordinates relative to the grid to those relative to the grid object\n * @returns {Object} the number of bombs and unknown fields in the diagonal\n */\nexport function* back_diagonal(grid, row, col, grid_coords) {\n\tlet sz = (grid.length-1) / 2 + 1;\n\tlet grid_col = get_col_relative_to_grid(sz, row, col);\n\n\tif (row >= sz - 1) {\n\t\tfor (let r=row,c=grid_col; r>row-sz; r--, c--) {\n\t\t\tyield [r,grid_coords[r][c]];\n\t\t}\n\t} else {\n\t\tfor (let r=row,c=grid_col; r<row+sz; r++, c++) {\n\t\t\tyield [r,grid_coords[r][c]];\n\t\t}\t\t\n\t}\n}\nexport function* horizontal(grid, row) {\n\tfor (let c=0;c<grid[row].length;c++) {\n\t\tyield [row,c];\n\t}\n}\nexport function* vertical(grid, row, col, sz) {\n\tlet grid_col = get_col_relative_to_grid(sz, row, col);\n\tlet col_len = get_row_size(sz, grid_col);\n\tlet r_start = Math.abs(sz-1-grid_col);\n\tlet c_start = grid_col >= sz ? get_row_size(sz, r_start) - 1 : 0;\n\n\tfor (let r=r_start, c=c_start, i=0; i < col_len; i++, r++) {\n\t\tyield [r,c];\n\n\t\tif (r >= sz - 1) c--;\n\t\telse c++;\n\t}\n}\n\nexport function get_row_type(dir) {\n    switch (dir) {\n\t\tcase \"SE\":\n\t\tcase \"NW\":\n\t\t\treturn \"back_diagonal\";\n\t\tcase \"NE\":\n\t\tcase \"SW\":\n\t\t\treturn \"forward_diagonal\";\n\t\tcase \"N\":\n\t\tcase \"S\":\n\t\t\treturn \"vertical\";\n\t\tdefault:\n\t\t\treturn \"horizontal\";\n    }\n}\n\n// export function closest_odd(n) {\n// \tlet up = Math.floor(n + 0.5);\n// \tlet down = Math.ceil(n - 0.5);\n// \treturn up % 2 === 1 ? up : down;\n// }\n","import React from 'react';\nimport './Board.scss';\nimport Square from '../Square/Square';\nimport '../Square/Square.scss';\nimport clone from 'just-clone';\nimport { GAME_STATUS, SQUARE_STATUS, SQUARE_TYPES, TOOLS } from '../../utils';\nimport ToolBox from '../ToolBox/ToolBox';\nimport Clue from '../Clue/Clue';\nimport * as CountBombs from './CountBombs';\n\nclass GameEnd extends React.Component {\n  refreshPage() {\n    window.location.reload();\n  }\n  render() {\n    return (\n      <div style={{textAlign: 'center'}}>\n        {this.props.result}\n        <br />\n        <button onClick={this.refreshPage}>Retry?</button>\n      </div>\n    )\n  }\n}\n\nfunction determine_new_square_status(old_square, tool, remaining_state) {\n  // square already revealed\n  if (old_square.status >= SQUARE_STATUS.REVEALED) return old_square.status;\n  \n  switch (tool) {\n    case TOOLS.FLAG:\n      return old_square.status === SQUARE_STATUS.FLAGGED ? SQUARE_STATUS.UNKNOWN : (remaining_state[TOOLS.FLAG] > 0 ? SQUARE_STATUS.FLAGGED : old_square.status);\n    case TOOLS.DIG:\n      return remaining_state[TOOLS.DIG] > 0 ? SQUARE_STATUS.REVEALED + old_square.type : old_square.status;\n    // case TOOLS.CLEAR:\n    default:\n      return old_square.type === SQUARE_TYPES.EMPTY ? SQUARE_STATUS.REVEALED_EMPTY : SQUARE_STATUS.REVEALED_BOMB_DANGER;\n  }\n}\n\nfunction generate_grid_cols_from_squares(sz) {\n  let grid_to_square = {};\n  let num_of_rows = 2 * sz - 1;\n\n  for (let r=0;r<num_of_rows;r++) {\n    let row_len = CountBombs.get_row_size(sz, r);\n    grid_to_square[r] = {};\n    for (let c=0;c<row_len;c++) {\n      grid_to_square[r][CountBombs.get_col_relative_to_grid(sz, r, c)] = c;\n    }\n  }\n  return grid_to_square;\n}\n\nclass Board extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n    let sz = props.size || 4;\n    this.size = sz;\n    let len = 2 * sz - 1;\n    let density = props.bomb_density || 0.3;\n    let total_fields =  sz ** 2 + (sz-1) ** 2;\n    this.total_fields = total_fields;\n    \n    let total_digs = props.digs || 2;\n\n\t\tthis.state = {\n      squares: Array(len).fill(null).map((_,i) => Array(CountBombs.get_row_size(sz, i)).fill(null).map(_ => ({\n        type: Math.random() < density ? SQUARE_TYPES.BOMB : SQUARE_TYPES.EMPTY,\n        status: SQUARE_STATUS.UNKNOWN,\n      }))),\n      current_game_status: GAME_STATUS.ONGOING,\n      tool: TOOLS.CLEAR,\n      remaining: {}\n    };\n    this.state.remaining[TOOLS.DIG] = total_digs\n    this.state.remaining[TOOLS.FLAG] = this.state.squares.flat().filter(i => i.type === SQUARE_TYPES.BOMB).length;\n    this.state.remaining[TOOLS.CLEAR] = total_fields - this.state.remaining[TOOLS.FLAG];\n\n    this.grid_col_to_square_col = generate_grid_cols_from_squares(sz);\n  }\n  updateGameStatus(old_square, new_square) {\n    if (new_square.status === old_square.status) {\n      // no change\n      return false;\n    }\n\n    let remaining_state = this.state.remaining;\n\n    if (this.state.tool === TOOLS.DIG) {\n      remaining_state[TOOLS.DIG]--;\n    }\n    if (new_square.status >= SQUARE_STATUS.REVEALED) {\n      remaining_state[TOOLS.CLEAR]--;\n    }\n    this.setState({\n      remaining: remaining_state\n    });\n\n    if (old_square.status === SQUARE_STATUS.FLAGGED && new_square.status === SQUARE_STATUS.UNKNOWN) {\n      remaining_state[TOOLS.FLAG]++;\n    }\n    else if ((old_square.status === SQUARE_STATUS.UNKNOWN && new_square.status === SQUARE_STATUS.FLAGGED) || new_square.status >= SQUARE_STATUS.REVEALED_BOMB) {\n      remaining_state[TOOLS.FLAG]--;\n    }\n    \n    this.setState({\n      remaining: remaining_state\n    });\n    if (new_square.status === SQUARE_STATUS.REVEALED_BOMB_DANGER) {\n      // game over\n      return GAME_STATUS.LOSS;\n    }\n    else if (remaining_state[TOOLS.CLEAR] === 0) {\n      return GAME_STATUS.WIN;\n    }\n    return GAME_STATUS.ONGOING;\n  }\n  componentDidMount() {\n    document.addEventListener(\"contextmenu\", (e) => {\n      if (e.target.closest(\".square\")) {\n        e.preventDefault();\n        let sq = e.target.closest(\".square\").dataset;\n        this.handleSquareClick(parseInt(sq.row),parseInt(sq.col),true);\n      }\n    }, true);\n    document.addEventListener(\"auxclick\", (e) => {\n      const clue = e.target.closest(\".clue\");\n      if (clue && e.which === 2) {\n        e.preventDefault();\n        let sq = clue.parentElement.querySelector(\".square\").dataset;\n        this.handleClueClick(parseInt(sq.row),parseInt(sq.col), new Array(...clue.classList).filter(i => i.length <= 2)[0]);\n      }\n    }, true);\n  }\n  handleSquareClick(row, col, is_rightclick=false) {\n    if (this.state.current_game_status !== GAME_STATUS.ONGOING) return false;\n    // e.stopPropagation();\n    // e.nativeEvent.stopImmediatePropagation();\n    // e.preventDefault();\n    // e.nativeEvent.preventDefault();\n\n    const was_dig_tool = this.state.tool === TOOLS.DIG; \n    if (this.state.tool !== TOOLS.DIG && is_rightclick) {\n      this.setState({\n        tool: TOOLS.FLAG\n      });\n    }\n\n    if (this.state.tool !== TOOLS.FLAG && this.state.squares[row][col].status === SQUARE_STATUS.FLAGGED) return false;\n\n    this.updateSquare(row, col);\n\n    if (this.state.tool === TOOLS.FLAG) {\n      this.setState({\n        tool: was_dig_tool ? TOOLS.DIG : TOOLS.CLEAR\n      });\n    }\n  }\n  updateSquare(row, col) {\n    const squares_to_update = clone(this.state.squares);\n  \n    let old_square = squares_to_update[row][col];\n    let new_square = clone(old_square);\n    new_square.status = determine_new_square_status(old_square, this.state.tool, this.state.remaining);\n    \n    let new_game_status = this.updateGameStatus(old_square, new_square);\n    if (new_game_status === false) return;\n    \n    squares_to_update[row][col] = new_square;\n    this.setState({\n      squares: squares_to_update,\n      current_game_status: new_game_status\n    });\n  }\n  toggleShovel() {\n    this.setState({\n      tool: (this.state.tool === TOOLS.DIG ? TOOLS.CLEAR : TOOLS.DIG)\n    });\n  }\n  getCountBombGenerator(row, col, dir) {\n    const row_type = CountBombs.get_row_type(dir);\n    let extra_arg;\n    if (row_type === \"vertical\") extra_arg = this.size;\n    else if (row_type === \"back_diagonal\" || row_type === \"forward_diagonal\") extra_arg = this.grid_col_to_square_col;\n\n    return CountBombs[row_type](this.state.squares, row, col, extra_arg);\n  }\n  handleClueClick(row, col, dir) {\n    const squares_to_update = clone(this.state.squares);\n    let itr = this.getCountBombGenerator(row, col, dir);\n    \n    let coords_to_clear = [];\n    for (let coords of itr) {\n      let square = squares_to_update[coords[0]][coords[1]];\n      if (square.type === SQUARE_TYPES.BOMB && square.status !== SQUARE_STATUS.FLAGGED && square.status < SQUARE_STATUS.REVEALED) {\n        return;\n      }\n      if (square.status === SQUARE_STATUS.UNKNOWN) {\n        coords_to_clear.push(coords);\n      }\n    }\n\n    for (let coords of coords_to_clear) {\n      this.updateSquare(...coords);\n    }\n  }\n  addClue(list, dir, row, col) {\n    let itr = this.getCountBombGenerator(row, col, dir);\n\n    let bombs_cnt = 0; let unknown_cnt = 0;\n    for (let coords of itr) {\n      let square = this.state.squares[coords[0]][coords[1]];\n      bombs_cnt += square.type;\n      unknown_cnt += square.status === SQUARE_STATUS.REVEALED_EMPTY ? 0 : 1;\n    }\n    list.push(<Clue dir={dir} value={bombs_cnt} total={unknown_cnt} key={[dir, row, col].join(\"-\")} />);\n  }\n  display_clues(row, col) {\n    let n = this.size;\n    let max_len = 2*n - 1;\n    let row_len = CountBombs.get_row_size(n, row);\n    let col_len = CountBombs.get_col_size(n, row, col);\n    let half_n_floored = Math.floor(n / 2);\n    let half_max_len_floored = Math.floor(max_len / 2);\n\n    let clues = [];\n    \n    // NW / SE \n    if (row < half_n_floored && col === 0) {\n      this.addClue(clues,\"SE\", row, col);\n    } \n    else if (row >= max_len - half_n_floored && col === row_len - 1) {\n      this.addClue(clues,\"NW\", row, col);\n    }\n    \n    // NE / SW\n    if (row > half_n_floored && row < max_len - half_n_floored && col === 0) {\n      this.addClue(clues,\"NE\",row, col);\n    } \n    else if (row < n && row >= half_n_floored && col === row_len - 1) {\n      this.addClue(clues,\"SW\",row, col);\n    }\n\n    // N / S\n    if (col_len >= Math.max(3, half_max_len_floored - max_len % 2)) {\n      if (row > half_n_floored && col === 0 && row !== max_len-1) {\n        this.addClue(clues,\"N\",row, col);\n      } else if (row < max_len - half_n_floored-1 && col === row_len - 1) {\n        this.addClue(clues,\"S\",row, col);\n      }\n    }\n\n    // E / W\n    if (row_len >= Math.max(3, half_max_len_floored - max_len % 2)) {\n      if (row > half_n_floored + 1 && col === row_len - 1 && col !== 0) {\n        this.addClue(clues,\"W\",row, col);\n      } else if (row < max_len - half_n_floored-1 && col === 0) {\n        this.addClue(clues,\"E\",row, col);\n      }\n    }\n\n    return clues;\n  }\n\trender() {\n    // this.state.squares.forEach((row, i) => row.forEach((square_data, j) => console.log(square_data.status)));\n    let tools = [\n      {\n        type: \"shovel\",\n        icon: \"⛏️\",\n        value: this.state.remaining[TOOLS.DIG],\n        active: this.state.tool === TOOLS.DIG,\n        onClick: this.toggleShovel.bind(this)\n      },\n      {\n        type: \"flag\",\n        icon: \"🚩\",\n        value: this.state.remaining[TOOLS.FLAG]\n      }\n    ];\n\t  return (\n      <div className=\"board\">\n        <ToolBox tools={tools} />\n        <div className=\"grid\">\n          {this.state.squares.map((row, i) => (\n              <div className=\"row\" key={i}>\n                {row.map((square_data, j) => (\n                  <Square key={i + \",\" + j} \n                    type={square_data.type} status={square_data.status} \n                    game_state={this.state.current_game_status}\n                    row={i} col={j}\n                    clues={this.display_clues(i,j)}\n                    onClick={this.handleSquareClick.bind(this,i,j,false)} \n                    />\n                ))}\n              </div>\n            ))}\n        </div>\n        {\n          this.state.current_game_status === GAME_STATUS.LOSS ? <GameEnd result=\"loss\" /> : \"\"\n        }\n        {\n          this.state.current_game_status === GAME_STATUS.WIN ? <GameEnd result=\"win\" /> : \"\"\n        }\n      </div>\n\t  );\n\t}\n}\n\nexport default Board;\n","// import logo from './logo.svg';\nimport './Game.scss';\n\nimport Board from '../Board/Board';\n\nfunction Game() {\n  return (\n    <Board size='4' />\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Game from './components/Game/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('game')\n);\n"],"sourceRoot":""}